react:
  language:
    name: English
    code: en
  sampler:
    general:
      hitrate: Determines the hit rate of reacts reactions. For example, what percent
        of the time does react detect something specific.
      timings: Check the hardest hitting timings value.
      tps: Twenty times a second the server 'ticks'. This is where all the action
        happens on the cpu. If this number is lower than 17 you will start to expirience
        server lag.
      stability: This percent is determined by your TPS, MEM, and more over large
        periods of time.
      history: View this on the lower right quadrant on the map.
      players: Samples how many players are connected to the server.
      reactiontime: Counts the ammount of time in miliseconds it takes react to do
        everything it is scheduled to do. One tick is 50ms, so typically react is
        under 3ms
      cpuscore: This calculates the single threaded performance of your cpu while
        under (or not) load.
      plugins: React tracks and communicates with other plugins. They are typically
        common plugins that lots of servers use.
    world:
      tileentities: Counts all tile entities loaded on all worlds.
      liquidflow: Liquid Flows per Second. This is when liquid expands or drains.
      drops: Counts all drops loaded on all worlds.
      hopper: Hopper Transfers per Second. Every time a hopper tranfers something
        at all.
      redstone: Redstone Updates per Second. Every time redstone updates at all.
      entities: Counts all entities loaded on all worlds.
      tnt: The average tnt primes per second.
    chunk:
      memory: Counts all chunks in all loaded worlds and determines the memory consumption.
      loaded: Counts all chunks in all loaded worlds.
      load: The average chunks loaded per second.
      gen: The average chunks generated per second.
    memory:
      garbagedirection: When the server uses memory, and is done using it, it marks
        it as trash. This sample measures the direction of it.
      used: Memory (RAM) is temporary storage for short term data such as player position,
        chunks, and more. This measures how much memory you are using.
      players: A very rough estimate of how many megabytes a player takes up.
      mahs: This measures the rate the server consumes memory. Note that more than
        90% of this memory will be quickly restored for reuse.
      gc: When the server uses memory, and is done using it, it marks it as trash.
        This sample measures how often it 'cleans' the trash.
  message:
    heartbeat:
      start: STARTING HEART BEAT THREAD
    slowed:
      fixed: Your fly speed has been restored.
    help:
      guess: /react guess -m 1024 >> Guess players with 1g of mem
      samplers:
        b: Shows all of the samplers react uses.
        a: /re help samplers
      reactions:
        a: /re help reactions
        b: Shows all of the actions that can be used by react.
      monitoring:
        a: /re help monitoring
        b: Information on how to monitor.
      about:
        b: General information on what react is, and how to get started.
        a: /re help about
    garbage: 'Garbage: '
    sided:
      console: You must use this from the console.
      ingame: You must be in-game to use this_
    console:
      only: You must use this from the console.
      complete: React has downloaded an update! Restart your server to update!
    manual:
      started: ' started.'
      finish: 'Action: '
    unknown:
      book: Unknown book. Use /re help
      action: Unknown Action. Use /re act for a list of actions.
    monitor:
      lock:
        fail: Please turn on monitoring to lock tabs.
    plugins: 'Plugins/Other: '
    scoreboard:
      enabled: Scoreboard Monitoring Enabled
      disabled: Scoreboard Monitoring Disabled
    error:
      notcommand: Unknown Command. Use /react
      latestversion: You have the latest version!
      pluginunknown: Unknown Plugin
      nonumber: 'Not a number: '
    mapping:
      enabled: Mapping Enabled
      disabled: Mapping Disabled
      resumed: Mapping Resumed
      paused: Mapping Paused
    lang:
      help: /re lang <language>
      unknown: Unknown language
    internal:
      reloaded: Reloaded
    monitoring:
      resumed: Monitoring Resumed
      enabled: Monitoring Enabled
      disabled: Monitoring Disabled
      paused: Monitoring Paused
    book: Book given/updated
    world:
      save: 'SAVING WORLD: '
      success: PRECAUTIONS TAKEN. HOPEFULLY WE WONT CRASH!
      warning: 'WARNING: SERVER WAS LAGGING HARD ON THE LAST TICK'
      disable: HEART BEAT SAVING DISABLED. Not saving worlds or players.
      saveinvalid: Not Saving... We Just Saved!
      playersave: SAVING PLAYERS...
      precaution: REACT IS TAKING PRECAUTIONS TO ENSURE NO DATA IS LOST IN THE EVENT
        OF A CRASH
    players: 'Players: '
    update:
      found: 'Update Found: '
    servercurrent: 'You are on '
    dumped: 'Created a dump file to '
    memory:
      used: 'Used Memory: '
      max: 'Max Memory: '
    verboseon: Verbose Enabled
    metric:
      fail: React failed to connect to metrics for some reason.
    cpuscore: 'CPU Score: '
    paper:
      unsupported: React Timings Processing does not yet support PaperSpigot as PaperSpigot
        modifies the api for getting timings causing all sorts of issues.
    'no':
      data: No Data. This typically means you are not on a bungeecord network.
    servercount:
      a: 'There are '
      b: ' servers on the network using react.'
    fixed: Fixed!
    kex:
      finish1: Un-Kexxing
      finish2: ' Update...'
      start: ' Kexxed Update...'
    player:
      only: You must be ingame to use this.
    queryresult: Queried Result
    chunks: 'Chunks: '
    verbose: 'Verbose: '
    insufficient:
      permission: Â§cInsufficient Permission
    issues: Stabilizing...
    action:
      fully:
        automatic: ' is a fully automatic action.'
      stabilizing: Stabilizing...
    reloaded: React Reloaded
    verboseoff: Verbose Disabled
    hook:
      attempt: Attempting to hook into Placeholder API
      success: Hooked into Placeholder API
    bungeeoff: Bungeecord support is off.
    load:
      fail: React Failed to load correctly. Attempting to force start.
    dump:
      fail: Failed to write dump file.
    uptime: 'Uptime: '
  action:
    instabilitycause: 'If any sort of instability is detected, react begins to collect
      evidence and determine the right thing to do. '
    suppressgrowth: This dynamically changes the growth modifiers depending on how
      dense the growth is.
    purgedrops: Removes ALL DROPS in ALL WORLDS
    dullentities: Dulls down entities (removing ai)
    cullentities: Removes excess mobs from highly populated chunks. Additionally prevents
      spawning if the limit is reached.
    heavychunk: Teleports you close to the chunk with the most entities in it. If
      there are no heavy chunks, you may not be teleported or it may not be that laggy
      at all.
    cacheentities: Cache mobs far away from players
    restackentities: Restack all entities force-unstacked
    suppressredstone: Suppresses redstone if and only if the instability threshold
      reaches a limit for redstone.
    suppresstnt: Suppresses tnt if and only if the instability threshold reaches a
      limit for tnt.
    culldrops: Drops are determined by their worth within the configs. This will then
      determine weather react should cull 30 pieces of dirt, or 20 diamonds. Basically,
      friendly drop culling.
    suppresshopper: Suppresses hoppers if and only if the instability threshold reaches
      a limit for hoppers.
    stackentities: Entities are stacked together to reduce overhead.
    purgeentities: Removes ALL ENTITY TYPES DEFINED IN THIS CONFIG in ALL WORLDS
    unstackentities: Unstack all entities stacked and prevent those entities from
      being re-stacked.
    purgechunks: This action purges chunks that have not unloaded. MANUAL ONLY
    teleportdrops: When enabled, some drops will be teleported and given to the player
      who broke the block only when the server has too many drops or is lagging.
    suppressliquid: Suppresses liquid if and only if the instability threshold reaches
      a limit for liquid.
    garbagecollection: This takes out the virtual trash (sometimes frees memory up).
      Warning this will freeze the server for 1-5 seconds. This is only used automatically
      if it is configured to do so.
  command:
    help: Sends a book of information on help topics.
    client: View information on connected react clients.
    servers: List all servers on the network with data.
    ping: Shows highest ping, lowest, and yours.
    auth: Setup spigot authentication for updates.
    verbose: Turn on verbose information ingame/console
    cpuscore: Get your server's CPU score.
    act: Run actions (or turn on/off automatic actions)
    dump: Dump information to a file for review
    lang: Change or list supported languages
    reload: reloads all react configuration files.
    scoreboard: View monitoring information via scoreboard.
    rg: Region Commands for World Guard
    plugins: List plugin timings
    clean: Cleanup the configurations & data
    version: Compares your version with any new ones.
    scan: Scan the current chunk and list the number of entities (and tile entities)
      for that given chunk.
    tm: Task Manager Status
    query: Query information on plugin(s).
    map: enables visual graphical monitoring
    list: List all servers on the network with data.
    guessmemory: Guess server capabilities with X Ram
    guess: Guess Server Capabilities.
    book: Sends a book of updated issues react finds.
    stfu: Silence React Warnings
    monitor: enables title-text monitoring
    update: Force Download the latest copy of react.
    status: Sends a book of updated issues React finds.
    timings: Send a book of the hardest hitting timings.
  gui:
    actions: Actions
  monitoring: Monitoring
  config:
    react:
      allowtitleverbose: Allow title message verbose? Players still have to turn it
        on if it is enabled.
      multithread: |-
        Use multiple threads to handle react processing
        If multicore is off, this feature wont be used.
      overrides:
        memory: Override the /mem and /memory for more accurate information
        tps: Override the /tps and /lag commands for more accurate information
      interval: "Request interval. \nUSERS HAVE BEEN MOVED TO THE react-users FOLDER!"
      verbose: Startup verbose for extra information.
      debugmessages: Run the garbage collector after startup to prevent memory issues
        from reloading and startup.
      allowshiftaccuracy: When enabled, holding shift while monitoring will show more
        accurate numbers.
      titletick:
        base: |-
          The default tickrate for the monitor. Lower = faster.
          This will only take effect if dynamic ticking is off.
        dynamic: Slows down monitoring tickrates depending on how demanding it is
          to the server.
      broadcast: "Inform other players with the permission react.monitor \nwhen a\
        \ player manually executes an action."
      remote:
        enable: This is for remote access to the react server
        port: Make sure the port is open. You may get a failed to bind to port message
          if it isnt. DONT USE 25565!
      titlebolding: Bolden the text on the monitor when in bright daylight. This is
        intended to make the text clearer when looking at bright colors on the screen.
      multicore: Use multiple threads to handle react processing
      tag: Here you can configure the tag for react. Uses color codes.
      splash: Enable the splash screen
      stats: Should we track usage statistics?
      instabilitynotify: Notifiy players with react.monitor permissions of instabilities?
      disablereactions: Disable all reactions. Just sampling basically.
      restart: Should React automagically attempt to restart the server should it
        fail?
      permdenymsg: Permission denied message.
      startupprof: "Some systems can have trouble with system profiling. \nIf you\
        \ have weird issues, try disabling this first."
      scoreboard: The interval in ticks to send scoreboard packets to monitors.
  book:
    configuration:
      text: React is highly configurable. You can disable any feature you wish, and
        configure any timings as you like. React can be tailored to literally any
        server.
      title: Configuration
    reactions:
      text: Since react is sampling many aspects of the server, we can now determine
        the source of the lag. This allows us to 'react to it', fixing the problem
        automatically.
      title: Reactions
    greeting:
      text: React is a plugin that handles server lag in a judge & react way. This
        plugin does not just remove entities on a timer and call it 'lag remover'.
        React fixes this problem.
    monitoring:
      text: React is not opaque. You are able to view everything react sees, to start
        monitoring, use /react monitor, but you may want to use /re help monitoring
        first to see how it works.
      title: Monitoring
    monitor:
      text: The base command for monitoring is /re mon (/react monitor). This command
        sends title messages to you with numbers. If you don't know what a sample
        is, use /re help samplers
      title: How to Monitor
    trialerror:
      text: Since there are many ways to fix one problem, react will try several different
        things to fix an issue. If it fixes, react keeps using that method. This means
        react tailors itself to your server over time.
      title: Trial & Error
    samples:
      title: Samples
      text: For React to accurately judge lag, you cannot simply track the Ticks per
        second. If you don't know what is CAUSING the lag, you can't guarantee a fix.
        Welcome to react!
    tabs:
      text: Each element in the monitor actually contains more samples. Hold Shift
        and scroll your mouse wheel to select the tab you like. Try it!
      title: Changing Tabs
    performance:
      title: Performance Charting
      text: You can also view a live graph of your server . It is rendered on a map.
        Use /re map
    persistence:
      title: Persistence
      text: If you log off, or the server reboots, your monitor/map mode will be turned
        back on (unless you turn it off)
  debug:
    starting: Starting React v
    released: 'Released '
    finished: All good to go!
    ofmemory: ' of memory.'
    metrics:
      start: Metrics Started
    controller:
      stopping: 'Stopping Controller: '
    in: ' in '
    start: 'Started '
    ms: ms
  samplers: Samplers
  reactions: Reactions
  example: Example
  react:
    name: React
config:
  version: 1
